from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import keyboards as kb
import kinopoisk as kp
import db

router = Router()

@router.message(CommandStart())
@router.message(F.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def main_menu(message: Message):
    film = await db.get_settings(message.from_user.id)
    type, genre, year, country, length = film[0]
    await message.answer(
        text=f"<b>–¢–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>\n"
             f"–¢–∏–ø: {type}\n"
             f"–ñ–∞–Ω—Ä: {genre}\n"
             f"–ì–æ–¥: {year}\n"
             f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
             f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.",
        reply_markup=kb.main
    )

@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back(message: Message, state: FSMContext):
    await state.set_state(Settings.point)
    await settings(message, state)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def film(message: Message):
    await message.answer(text="–°–µ–∫—É–Ω–¥—É...")

    film = await db.get_settings(message.from_user.id)
    type, genre, year, country, length = film[0]
    film = await kp.get_film(type, genre, year, country, length)

    if film:
        await message.answer_photo(
            photo=film.rsplit("\n", 1)[1],
            caption=film.rsplit("\n", 1)[0],
            reply_markup=kb.film
        )
    else:
        await message.answer(
            text="–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=kb.main
        )

@router.message(F.text == "üé≤ –†–∞–Ω–¥–æ–º")
async def random_film(message: Message):
    await message.answer(text="–°–µ–∫—É–Ω–¥—É...")
    film = await kp.get_random_film()
    await message.answer_photo(
        photo=film.rsplit("\n", 1)[1],
        caption=film.rsplit("\n", 1)[0],
        reply_markup=kb.random
    )


class Settings(StatesGroup):
    point = State()
    movieType = State()
    year = State()
    country = State()
    genre = State()
    movieLength = State()

@router.message(F.text == "‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
async def settings(message: Message, state: FSMContext):
    await state.set_state(Settings.point)
    film = await db.get_settings(message.from_user.id)
    type, genre, year, country, length = film[0]
    await message.answer(
        text=f"<b>‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>\n"
             f"–¢–∏–ø: {type}\n"
             f"–ñ–∞–Ω—Ä: {genre}\n"
             f"–ì–æ–¥: {year}\n"
             f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
             f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
        reply_markup=kb.main_settings)

@router.message(F.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
async def save(message: Message, state: FSMContext):
    await state.set_state(None)
    await main_menu(message)

@router.message(Settings.point)
async def settings_pt(message: Message, state: FSMContext):
    text = message.text
    if text == "–¢–∏–ø":
        await state.set_state(Settings.movieType)
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤–≤–µ–¥—è –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: movie\n"
                                  "–î–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'\n\n"
                                  "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                             reply_markup=kb.settings_list)
    elif text == "–°—Ç—Ä–∞–Ω–∞":
        await state.set_state(Settings.country)
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –≤–≤–µ–¥—è –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                                  "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: –°–®–ê\n"
                                  "–î–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
                             reply_markup=kb.settings_list)
    elif text == "–ñ–∞–Ω—Ä":
        await state.set_state(Settings.genre)
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä, –≤–≤–µ–¥—è –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                                  "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–º–µ–¥–∏—è\n"
                                  "–î–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
                             reply_markup=kb.settings_list)
    elif text == "–ì–æ–¥":
        await state.set_state(Settings.year)
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025\n"
                                  "–î–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
                             reply_markup=kb.settings)
    elif text == "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
        await state.set_state(Settings.movieLength)
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: 90-120\n"
                                  "–î–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
                             reply_markup=kb.settings)

@router.message(Settings.movieType, F.text == "üìã –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫")
async def movieType_list(message: Message):
    await message.answer(
        text=("<b>–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤:</b>\n"
              "animated-series ‚Äî –ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª\n"
              "anime ‚Äî –ê–Ω–∏–º–∞—Ü–∏—è\n"
              "cartoon ‚Äî –ú—É–ª—å—Ç—Ñ–∏–ª—å–º\n"
              "movie ‚Äî –§–∏–ª—å–º\n"
              "tv-series ‚Äî –°–µ—Ä–∏–∞–ª"),
        reply_markup=kb.settings_list
)
@router.message(Settings.movieType)
async def movieType(message: Message, state: FSMContext):
    text = message.text
    if text == "-":
        await db.clear_settings(message.from_user.id, 'type')
        await state.set_state(Settings.point)
        await settings(message, state)
    elif text in [
        "animated-series",
        "anime",
        "cartoon",
        "movie",
        "tv-series"]:
        await db.set_settings(message.from_user.id, type=text)
        await state.set_state(Settings.point)
        await settings(message, state)
    else:
        await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            reply_markup=kb.settings_list)

@router.message(Settings.genre, F.text == "üìã –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫")
async def genre_list(message: Message):
    text = await kp.get_menu_list("–ñ–∞–Ω—Ä")
    await message.answer(
        text=text,
        reply_markup=kb.settings_list
)
@router.message(Settings.genre)
async def genre(message: Message, state: FSMContext):
    text = message.text
    if text == "-":
        await db.clear_settings(message.from_user.id, 'genre')
        await state.set_state(Settings.point)
        await settings(message, state)
    elif text in await kp.get_list("–ñ–∞–Ω—Ä"):
        await db.set_settings(message.from_user.id, genre=text)
        await state.set_state(Settings.point)
        await settings(message, state)
    else:
        await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∂–∞–Ω—Ä",
            reply_markup=kb.settings_list)

@router.message(Settings.year)
async def year(message: Message, state: FSMContext):
    text = message.text
    if text == "-":
        await db.clear_settings(message.from_user.id, 'year')
        await state.set_state(Settings.point)
        await settings(message, state)
    elif text.isdigit():
        await db.set_settings(message.from_user.id, year=text)
        await state.set_state(Settings.point)
        await settings(message, state)
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ–¥")

@router.message(Settings.country, F.text == "üìã –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫")
async def country_list(message: Message):
    text = await kp.get_menu_list("–°—Ç—Ä–∞–Ω–∞")
    await message.answer(
        text=text,
        reply_markup=kb.settings_list
)
@router.message(Settings.country)
async def country(message: Message, state: FSMContext):
    text = message.text
    if text == "-":
        await db.clear_settings(message.from_user.id, 'country')
        await state.set_state(Settings.point)
        await settings(message, state)
    elif text in await kp.get_list("–°—Ç—Ä–∞–Ω–∞"):
        await db.set_settings(message.from_user.id, country=text)
        await state.set_state(Settings.point)
        await settings(message, state)
    else:
        await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞",
            reply_markup=kb.settings_list)

@router.message(Settings.movieLength)
async def movieLength(message: Message, state: FSMContext):
    try:
        text = message.text
        if text == "-":
            await db.clear_settings(message.from_user.id, 'length')
            await state.set_state(Settings.point)
            await settings(message, state)
        else:
            map(int, text.split("-"))
            await db.set_settings(message.from_user.id, length=text)
            await state.set_state(Settings.point)
            await settings(message, state)
    except:
        await message.answer("–î–∏–∞–ø–∞–∑–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")